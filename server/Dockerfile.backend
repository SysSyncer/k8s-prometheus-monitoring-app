# backend/Dockerfile.backend

# 1. Base Image: Use an official Python runtime
FROM python:3.9-slim

# 2. Set Working Directory: Where commands will run inside the container
WORKDIR /app

# 3. Copy Requirements File: Copy only this first to leverage Docker cache
COPY requirements.txt ./

# 4. Install Dependencies: Install Python packages
# --no-cache-dir: reduces image size
# --trusted-host pypi.python.org: Can sometimes help bypass network issues in certain environments
RUN pip install --no-cache-dir --trusted-host pypi.python.org -r requirements.txt

# 5. Copy Application Code: Copy the rest of your backend code
COPY . .

# 6. Expose Port: Inform Docker that the container listens on this port
# Note: This doesn't actually publish the port to the host.
EXPOSE 5001

# 7. Command: The command to run when the container starts
# Use gunicorn or similar for production, but Flask dev server is fine for this example
# CMD ["gunicorn", "--bind", "0.0.0.0:5001", "app:app"]
CMD ["flask", "run", "--host=0.0.0.0", "--port=5001"]